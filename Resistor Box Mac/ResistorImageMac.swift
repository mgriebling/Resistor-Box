//
//  ResistorImage.swift
//  ResistorBox
//
//  Created by Mike Griebling on 13 Mar 2018.
//  Copyright Â© 2018 Computer Inspirations. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import Cocoa

public class ResistorImage : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawResistor(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 153, height: 55), resizing: ResizingBehavior = .aspectFit, resistorValue: String = "Open") {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 153, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 153, y: resizedFrame.height / 55)


        //// Bezier Drawing
        let bezierPath = NSBezierPath()
        bezierPath.move(to: NSPoint(x: 2, y: 18))
        bezierPath.curve(to: NSPoint(x: 26, y: 18), controlPoint1: NSPoint(x: 26, y: 18), controlPoint2: NSPoint(x: 26, y: 18))
        bezierPath.line(to: NSPoint(x: 37, y: 34))
        bezierPath.line(to: NSPoint(x: 54, y: 2))
        bezierPath.line(to: NSPoint(x: 70, y: 34))
        bezierPath.line(to: NSPoint(x: 86, y: 2))
        bezierPath.line(to: NSPoint(x: 103, y: 34))
        bezierPath.curve(to: NSPoint(x: 119, y: 2), controlPoint1: NSPoint(x: 103, y: 34), controlPoint2: NSPoint(x: 119, y: -0))
        bezierPath.curve(to: NSPoint(x: 127, y: 18), controlPoint1: NSPoint(x: 119, y: 4), controlPoint2: NSPoint(x: 127, y: 18))
        bezierPath.line(to: NSPoint(x: 151, y: 18))
        NSColor.black.setStroke()
        bezierPath.lineWidth = 3
        bezierPath.lineCapStyle = .roundLineCapStyle
        bezierPath.lineJoinStyle = .roundLineJoinStyle
        bezierPath.stroke()


        //// Text Drawing
        let textRect = NSRect(x: 25, y: 33, width: 103, height: 27)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: NSFont(name: "HelveticaNeue-Bold", size: 20)!,
            .foregroundColor: NSColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = resistorValue.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        textRect.clip()
        resistorValue.draw(in: textTextRect.offsetBy(dx: 0, dy: 0), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawSeriesResistors(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 466, height: 80), resizing: ResizingBehavior = .aspectFit, value1: String = "11.1K", value2: String = "22.2K", value3: String = "33.3K") {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 466, height: 80), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 466, y: resizedFrame.height / 80)


        //// Symbol Drawing
        let symbolRect = NSRect(x: 8, y: 19, width: 153, height: 55)
        NSGraphicsContext.saveGraphicsState()
        symbolRect.clip()
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        ResistorImage.drawResistor(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, resistorValue: value1)
        NSGraphicsContext.restoreGraphicsState()


        //// Symbol 2 Drawing
        let symbol2Rect = NSRect(x: 154, y: 19, width: 153, height: 55)
        NSGraphicsContext.saveGraphicsState()
        symbol2Rect.clip()
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        ResistorImage.drawResistor(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, resistorValue: value2)
        NSGraphicsContext.restoreGraphicsState()


        //// Symbol 3 Drawing
        let symbol3Rect = NSRect(x: 299, y: 19, width: 153, height: 55)
        NSGraphicsContext.saveGraphicsState()
        symbol3Rect.clip()
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        ResistorImage.drawResistor(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, resistorValue: value3)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawSeriesParallelResistors(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 359, height: 137), resizing: ResizingBehavior = .aspectFit, value1: String = "11.1K", value2: String = "22.2K", value3: String = "33.3K") {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 359, height: 137), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 359, y: resizedFrame.height / 137)


        //// Symbol Drawing
        let symbolRect = NSRect(x: 8, y: 76, width: 153, height: 55)
        NSGraphicsContext.saveGraphicsState()
        symbolRect.clip()
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        ResistorImage.drawResistor(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, resistorValue: value1)
        NSGraphicsContext.restoreGraphicsState()


        //// Symbol 2 Drawing
        let symbol2Rect = NSRect(x: 154, y: 76, width: 153, height: 55)
        NSGraphicsContext.saveGraphicsState()
        symbol2Rect.clip()
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        ResistorImage.drawResistor(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, resistorValue: value2)
        NSGraphicsContext.restoreGraphicsState()


        //// Symbol 3 Drawing
        let symbol3Rect = NSRect(x: 154, y: 9, width: 153, height: 55)
        NSGraphicsContext.saveGraphicsState()
        symbol3Rect.clip()
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        ResistorImage.drawResistor(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, resistorValue: value3)
        NSGraphicsContext.restoreGraphicsState()


        //// Bezier Drawing
        let bezierPath = NSBezierPath()
        bezierPath.move(to: NSPoint(x: 155, y: 27))
        bezierPath.line(to: NSPoint(x: 155, y: 93))
        NSColor.black.setStroke()
        bezierPath.lineWidth = 3
        bezierPath.lineCapStyle = .roundLineCapStyle
        bezierPath.stroke()


        //// Oval Drawing
        let ovalPath = NSBezierPath(ovalIn: NSRect(x: 150, y: 89, width: 10, height: 10))
        NSColor.black.setFill()
        ovalPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = NSBezierPath()
        bezier2Path.move(to: NSPoint(x: 305, y: 28))
        bezier2Path.line(to: NSPoint(x: 305, y: 94))
        NSColor.black.setStroke()
        bezier2Path.lineWidth = 3
        bezier2Path.lineCapStyle = .roundLineCapStyle
        bezier2Path.stroke()


        //// Oval 2 Drawing
        let oval2Path = NSBezierPath(ovalIn: NSRect(x: 300, y: 89, width: 10, height: 10))
        NSColor.black.setFill()
        oval2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = NSBezierPath()
        bezier3Path.move(to: NSPoint(x: 305.5, y: 94.5))
        bezier3Path.line(to: NSPoint(x: 343.5, y: 94.5))
        NSColor.black.setStroke()
        bezier3Path.lineWidth = 3
        bezier3Path.lineCapStyle = .roundLineCapStyle
        bezier3Path.stroke()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawParallelResistors(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 260, height: 205), resizing: ResizingBehavior = .aspectFit, value1: String = "11.1K", value2: String = "22.2K", value3: String = "33.3K") {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 260, height: 205), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 260, y: resizedFrame.height / 205)


        //// Symbol Drawing
        let symbolRect = NSRect(x: 55, y: 12, width: 153, height: 55)
        NSGraphicsContext.saveGraphicsState()
        symbolRect.clip()
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        ResistorImage.drawResistor(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, resistorValue: value1)
        NSGraphicsContext.restoreGraphicsState()


        //// Symbol 2 Drawing
        let symbol2Rect = NSRect(x: 56, y: 145, width: 153, height: 55)
        NSGraphicsContext.saveGraphicsState()
        symbol2Rect.clip()
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        ResistorImage.drawResistor(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, resistorValue: value2)
        NSGraphicsContext.restoreGraphicsState()


        //// Symbol 3 Drawing
        let symbol3Rect = NSRect(x: 56, y: 78, width: 153, height: 55)
        NSGraphicsContext.saveGraphicsState()
        symbol3Rect.clip()
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        ResistorImage.drawResistor(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, resistorValue: value3)
        NSGraphicsContext.restoreGraphicsState()


        //// Bezier Drawing
        let bezierPath = NSBezierPath()
        bezierPath.move(to: NSPoint(x: 57, y: 96))
        bezierPath.line(to: NSPoint(x: 57, y: 162))
        NSColor.black.setStroke()
        bezierPath.lineWidth = 3
        bezierPath.lineCapStyle = .roundLineCapStyle
        bezierPath.stroke()


        //// Oval Drawing
        let ovalPath = NSBezierPath(ovalIn: NSRect(x: 52, y: 158, width: 10, height: 10))
        NSColor.black.setFill()
        ovalPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = NSBezierPath()
        bezier2Path.move(to: NSPoint(x: 207, y: 97))
        bezier2Path.line(to: NSPoint(x: 207, y: 163))
        NSColor.black.setStroke()
        bezier2Path.lineWidth = 3
        bezier2Path.lineCapStyle = .roundLineCapStyle
        bezier2Path.stroke()


        //// Oval 2 Drawing
        let oval2Path = NSBezierPath(ovalIn: NSRect(x: 202, y: 158, width: 10, height: 10))
        NSColor.black.setFill()
        oval2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = NSBezierPath()
        bezier3Path.move(to: NSPoint(x: 207.5, y: 163.5))
        bezier3Path.line(to: NSPoint(x: 245.5, y: 163.5))
        NSColor.black.setStroke()
        bezier3Path.lineWidth = 3
        bezier3Path.lineCapStyle = .roundLineCapStyle
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = NSBezierPath()
        bezier4Path.move(to: NSPoint(x: 14.5, y: 163.5))
        bezier4Path.line(to: NSPoint(x: 52.5, y: 163.5))
        NSColor.black.setStroke()
        bezier4Path.lineWidth = 3
        bezier4Path.lineCapStyle = .roundLineCapStyle
        bezier4Path.stroke()


        //// Bezier 5 Drawing
        let bezier5Path = NSBezierPath()
        bezier5Path.move(to: NSPoint(x: 57, y: 30))
        bezier5Path.line(to: NSPoint(x: 57, y: 96))
        NSColor.black.setStroke()
        bezier5Path.lineWidth = 3
        bezier5Path.lineCapStyle = .roundLineCapStyle
        bezier5Path.stroke()


        //// Oval 3 Drawing
        let oval3Path = NSBezierPath(ovalIn: NSRect(x: 52, y: 92, width: 10, height: 10))
        NSColor.black.setFill()
        oval3Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = NSBezierPath()
        bezier6Path.move(to: NSPoint(x: 57, y: 96))
        bezier6Path.line(to: NSPoint(x: 57, y: 162))
        NSColor.black.setStroke()
        bezier6Path.lineWidth = 3
        bezier6Path.lineCapStyle = .roundLineCapStyle
        bezier6Path.stroke()


        //// Oval 4 Drawing
        let oval4Path = NSBezierPath(ovalIn: NSRect(x: 52, y: 158, width: 10, height: 10))
        NSColor.black.setFill()
        oval4Path.fill()


        //// Bezier 7 Drawing
        let bezier7Path = NSBezierPath()
        bezier7Path.move(to: NSPoint(x: 207, y: 30))
        bezier7Path.line(to: NSPoint(x: 207, y: 96))
        NSColor.black.setStroke()
        bezier7Path.lineWidth = 3
        bezier7Path.lineCapStyle = .roundLineCapStyle
        bezier7Path.stroke()


        //// Oval 5 Drawing
        let oval5Path = NSBezierPath(ovalIn: NSRect(x: 202, y: 92, width: 10, height: 10))
        NSColor.black.setFill()
        oval5Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawVoltageDivider(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 372, height: 112), resizing: ResizingBehavior = .aspectFit, value1: String = "11.1K", value2: String = "22.2K") {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 372, height: 112), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 372, y: resizedFrame.height / 112)


        //// Symbol Drawing
        let symbolRect = NSRect(x: 45, y: 44, width: 153, height: 55)
        NSGraphicsContext.saveGraphicsState()
        symbolRect.clip()
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        ResistorImage.drawResistor(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, resistorValue: value1)
        NSGraphicsContext.restoreGraphicsState()


        //// Symbol 2 Drawing
        let symbol2Rect = NSRect(x: 192, y: 44, width: 153, height: 55)
        NSGraphicsContext.saveGraphicsState()
        symbol2Rect.clip()
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        ResistorImage.drawResistor(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, resistorValue: value2)
        NSGraphicsContext.restoreGraphicsState()


        //// Bezier Drawing
        let bezierPath = NSBezierPath()
        bezierPath.move(to: NSPoint(x: 193.5, y: 30.5))
        bezierPath.line(to: NSPoint(x: 193, y: 62))
        NSColor.black.setStroke()
        bezierPath.lineWidth = 3
        bezierPath.lineCapStyle = .roundLineCapStyle
        bezierPath.stroke()


        //// Oval Drawing
        let ovalPath = NSBezierPath(ovalIn: NSRect(x: 188, y: 57, width: 10, height: 10))
        NSColor.black.setFill()
        ovalPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = NSBezierPath()
        bezier2Path.move(to: NSPoint(x: 344.5, y: 62))
        bezier2Path.line(to: NSPoint(x: 344.5, y: 39))
        NSColor.black.setStroke()
        bezier2Path.lineWidth = 3
        bezier2Path.lineCapStyle = .squareLineCapStyle
        bezier2Path.lineJoinStyle = .roundLineJoinStyle
        bezier2Path.stroke()


        //// Text 3 Drawing
        let text3Rect = NSRect(x: 19, y: 46, width: 20, height: 33)
        let text3TextContent = "V"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .left
        let text3FontAttributes = [
            .font: NSFont(name: "HelveticaNeue-Bold", size: 30)!,
            .foregroundColor: NSColor.black,
            .paragraphStyle: text3Style,
        ] as [NSAttributedStringKey: Any]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: NSSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes).height
        let text3TextRect: NSRect = NSRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight)
        NSGraphicsContext.saveGraphicsState()
        text3Rect.clip()
        text3TextContent.draw(in: text3TextRect.offsetBy(dx: 0, dy: 0.5), withAttributes: text3FontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Polygon 2 Drawing
        NSGraphicsContext.saveGraphicsState()
        context.translateBy(x: 355.25, y: 42.5)
        context.rotate(by: 180 * CGFloat.pi/180)

        let polygon2Path = NSBezierPath()
        polygon2Path.move(to: NSPoint(x: 10.75, y: 22))
        polygon2Path.line(to: NSPoint(x: 20.06, y: 5.5))
        polygon2Path.line(to: NSPoint(x: 1.44, y: 5.5))
        polygon2Path.close()
        NSColor.black.setStroke()
        polygon2Path.lineWidth = 3
        polygon2Path.stroke()

        NSGraphicsContext.restoreGraphicsState()


        //// V * x Drawing
        let vXRect = NSRect(x: 169, y: 8, width: 48, height: 21)
        let vXTextContent = "Vâx"
        let vXStyle = NSMutableParagraphStyle()
        vXStyle.alignment = .center
        let vXFontAttributes = [
            .font: NSFont(name: "HelveticaNeue-Bold", size: 24)!,
            .foregroundColor: NSColor.black,
            .paragraphStyle: vXStyle,
        ] as [NSAttributedStringKey: Any]

        let vXTextHeight: CGFloat = vXTextContent.boundingRect(with: NSSize(width: vXRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: vXFontAttributes).height
        let vXTextRect: NSRect = NSRect(x: vXRect.minX, y: vXRect.minY + (vXRect.height - vXTextHeight) / 2, width: vXRect.width, height: vXTextHeight)
        NSGraphicsContext.saveGraphicsState()
        vXRect.clip()
        vXTextContent.draw(in: vXTextRect.offsetBy(dx: 0, dy: 0), withAttributes: vXFontAttributes)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawOpAmpGain(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 417, height: 163), resizing: ResizingBehavior = .aspectFit, value1: String = "11.1K", value2: String = "22.2K") {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 417, height: 163), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 417, y: resizedFrame.height / 163)


        //// Symbol Drawing
        let symbolRect = NSRect(x: 39, y: 79, width: 153, height: 55)
        NSGraphicsContext.saveGraphicsState()
        symbolRect.clip()
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        ResistorImage.drawResistor(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, resistorValue: value1)
        NSGraphicsContext.restoreGraphicsState()


        //// Symbol 3 Drawing
        let symbol3Rect = NSRect(x: 186, y: 12, width: 153, height: 55)
        NSGraphicsContext.saveGraphicsState()
        symbol3Rect.clip()
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        ResistorImage.drawResistor(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, resistorValue: value2)
        NSGraphicsContext.restoreGraphicsState()


        //// Bezier Drawing
        let bezierPath = NSBezierPath()
        bezierPath.move(to: NSPoint(x: 187, y: 30))
        bezierPath.line(to: NSPoint(x: 187, y: 96))
        NSColor.black.setStroke()
        bezierPath.lineWidth = 3
        bezierPath.lineCapStyle = .roundLineCapStyle
        bezierPath.stroke()


        //// Oval Drawing
        let ovalPath = NSBezierPath(ovalIn: NSRect(x: 182, y: 92, width: 10, height: 10))
        NSColor.black.setFill()
        ovalPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = NSBezierPath()
        bezier2Path.move(to: NSPoint(x: 337, y: 31))
        bezier2Path.line(to: NSPoint(x: 337.5, y: 112.5))
        NSColor.black.setStroke()
        bezier2Path.lineWidth = 3
        bezier2Path.lineCapStyle = .roundLineCapStyle
        bezier2Path.stroke()


        //// Oval 2 Drawing
        let oval2Path = NSBezierPath(ovalIn: NSRect(x: 332, y: 110, width: 10, height: 10))
        NSColor.black.setFill()
        oval2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = NSBezierPath()
        bezier3Path.move(to: NSPoint(x: 314.5, y: 114.5))
        bezier3Path.line(to: NSPoint(x: 354.5, y: 114.5))
        NSColor.black.setStroke()
        bezier3Path.lineWidth = 3
        bezier3Path.lineCapStyle = .roundLineCapStyle
        bezier3Path.stroke()


        //// Polygon Drawing
        NSGraphicsContext.saveGraphicsState()
        context.translateBy(x: 210.75, y: 157.5)
        context.rotate(by: 270 * CGFloat.pi/180)

        let polygonPath = NSBezierPath()
        polygonPath.move(to: NSPoint(x: 43, y: 103.5))
        polygonPath.line(to: NSPoint(x: 80.24, y: 25.87))
        polygonPath.line(to: NSPoint(x: 5.76, y: 25.87))
        polygonPath.close()
        NSColor.black.setStroke()
        polygonPath.lineWidth = 3
        polygonPath.stroke()

        NSGraphicsContext.restoreGraphicsState()


        //// Text Drawing
        let textRect = NSRect(x: 241, y: 121, width: 14, height: 19)
        let textTextContent = "+"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            .font: NSFont.boldSystemFont(ofSize: 17),
            .foregroundColor: NSColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        textRect.clip()
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 0.5), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Text 2 Drawing
        let text2Rect = NSRect(x: 241, y: 88, width: 14, height: 19)
        let text2TextContent = "â"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            .font: NSFont.boldSystemFont(ofSize: 17),
            .foregroundColor: NSColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedStringKey: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: NSSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes).height
        let text2TextRect: NSRect = NSRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight)
        NSGraphicsContext.saveGraphicsState()
        text2Rect.clip()
        text2TextContent.draw(in: text2TextRect.offsetBy(dx: 0, dy: 0.5), withAttributes: text2FontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Bezier 4 Drawing
        let bezier4Path = NSBezierPath()
        bezier4Path.move(to: NSPoint(x: 187.5, y: 97.5))
        bezier4Path.line(to: NSPoint(x: 236.5, y: 97.5))
        NSColor.black.setStroke()
        bezier4Path.lineWidth = 3
        bezier4Path.stroke()


        //// Text 3 Drawing
        let text3Rect = NSRect(x: 14, y: 80, width: 20, height: 33)
        let text3TextContent = "V"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .left
        let text3FontAttributes = [
            .font: NSFont(name: "HelveticaNeue-Bold", size: 30)!,
            .foregroundColor: NSColor.black,
            .paragraphStyle: text3Style,
        ] as [NSAttributedStringKey: Any]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: NSSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes).height
        let text3TextRect: NSRect = NSRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight)
        NSGraphicsContext.saveGraphicsState()
        text3Rect.clip()
        text3TextContent.draw(in: text3TextRect.offsetBy(dx: 0, dy: 0.5), withAttributes: text3FontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Polygon 2 Drawing
        NSGraphicsContext.saveGraphicsState()
        context.translateBy(x: 198.25, y: 131.5)
        context.rotate(by: 180 * CGFloat.pi/180)

        let polygon2Path = NSBezierPath()
        polygon2Path.move(to: NSPoint(x: 10.75, y: 22))
        polygon2Path.line(to: NSPoint(x: 20.06, y: 5.5))
        polygon2Path.line(to: NSPoint(x: 1.44, y: 5.5))
        polygon2Path.close()
        NSColor.black.setStroke()
        polygon2Path.lineWidth = 3
        polygon2Path.stroke()

        NSGraphicsContext.restoreGraphicsState()


        //// Bezier 5 Drawing
        let bezier5Path = NSBezierPath()
        bezier5Path.move(to: NSPoint(x: 237.5, y: 131.5))
        bezier5Path.line(to: NSPoint(x: 186.5, y: 131.5))
        NSColor.black.setStroke()
        bezier5Path.lineWidth = 3
        bezier5Path.stroke()


        //// Bezier 6 Drawing
        let bezier6Path = NSBezierPath()
        bezier6Path.move(to: NSPoint(x: 187.5, y: 132.5))
        bezier6Path.line(to: NSPoint(x: 187.5, y: 126.5))
        NSColor.black.setStroke()
        bezier6Path.lineWidth = 3
        bezier6Path.stroke()


        //// V * x Drawing
        let vXRect = NSRect(x: 356, y: 106, width: 48, height: 21)
        let vXTextContent = "-Vâx"
        let vXStyle = NSMutableParagraphStyle()
        vXStyle.alignment = .center
        let vXFontAttributes = [
            .font: NSFont(name: "HelveticaNeue-Bold", size: 24)!,
            .foregroundColor: NSColor.black,
            .paragraphStyle: vXStyle,
        ] as [NSAttributedStringKey: Any]

        let vXTextHeight: CGFloat = vXTextContent.boundingRect(with: NSSize(width: vXRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: vXFontAttributes).height
        let vXTextRect: NSRect = NSRect(x: vXRect.minX, y: vXRect.minY + (vXRect.height - vXTextHeight) / 2, width: vXRect.width, height: vXTextHeight)
        NSGraphicsContext.saveGraphicsState()
        vXRect.clip()
        vXTextContent.draw(in: vXTextRect.offsetBy(dx: 0, dy: 0), withAttributes: vXFontAttributes)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawOpAmpGain2(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 417, height: 163), resizing: ResizingBehavior = .aspectFit, value1: String = "11.1K", value2: String = "22.2K") {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 417, height: 163), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 417, y: resizedFrame.height / 163)


        //// Symbol Drawing
        let symbolRect = NSRect(x: 39, y: 79, width: 153, height: 55)
        NSGraphicsContext.saveGraphicsState()
        symbolRect.clip()
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        ResistorImage.drawResistor(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, resistorValue: value1)
        NSGraphicsContext.restoreGraphicsState()


        //// Symbol 3 Drawing
        let symbol3Rect = NSRect(x: 186, y: 12, width: 153, height: 55)
        NSGraphicsContext.saveGraphicsState()
        symbol3Rect.clip()
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        ResistorImage.drawResistor(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, resistorValue: value2)
        NSGraphicsContext.restoreGraphicsState()


        //// Bezier Drawing
        let bezierPath = NSBezierPath()
        bezierPath.move(to: NSPoint(x: 187, y: 30))
        bezierPath.line(to: NSPoint(x: 187, y: 96))
        NSColor.black.setStroke()
        bezierPath.lineWidth = 3
        bezierPath.lineCapStyle = .roundLineCapStyle
        bezierPath.stroke()


        //// Oval Drawing
        let ovalPath = NSBezierPath(ovalIn: NSRect(x: 182, y: 92, width: 10, height: 10))
        NSColor.black.setFill()
        ovalPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = NSBezierPath()
        bezier2Path.move(to: NSPoint(x: 337, y: 31))
        bezier2Path.line(to: NSPoint(x: 337.5, y: 112.5))
        NSColor.black.setStroke()
        bezier2Path.lineWidth = 3
        bezier2Path.lineCapStyle = .roundLineCapStyle
        bezier2Path.stroke()


        //// Oval 2 Drawing
        let oval2Path = NSBezierPath(ovalIn: NSRect(x: 332, y: 110, width: 10, height: 10))
        NSColor.black.setFill()
        oval2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = NSBezierPath()
        bezier3Path.move(to: NSPoint(x: 314.5, y: 114.5))
        bezier3Path.line(to: NSPoint(x: 354.5, y: 114.5))
        NSColor.black.setStroke()
        bezier3Path.lineWidth = 3
        bezier3Path.lineCapStyle = .roundLineCapStyle
        bezier3Path.stroke()


        //// Polygon Drawing
        NSGraphicsContext.saveGraphicsState()
        context.translateBy(x: 210.75, y: 157.5)
        context.rotate(by: 270 * CGFloat.pi/180)

        let polygonPath = NSBezierPath()
        polygonPath.move(to: NSPoint(x: 43, y: 103.5))
        polygonPath.line(to: NSPoint(x: 80.24, y: 25.87))
        polygonPath.line(to: NSPoint(x: 5.76, y: 25.87))
        polygonPath.close()
        NSColor.black.setStroke()
        polygonPath.lineWidth = 3
        polygonPath.stroke()

        NSGraphicsContext.restoreGraphicsState()


        //// Text Drawing
        let textRect = NSRect(x: 241, y: 121, width: 14, height: 19)
        let textTextContent = "+"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            .font: NSFont.boldSystemFont(ofSize: 17),
            .foregroundColor: NSColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        textRect.clip()
        textTextContent.draw(in: textTextRect.offsetBy(dx: 0, dy: 0.5), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Text 2 Drawing
        let text2Rect = NSRect(x: 241, y: 88, width: 14, height: 19)
        let text2TextContent = "â"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [
            .font: NSFont.boldSystemFont(ofSize: 17),
            .foregroundColor: NSColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedStringKey: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: NSSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes).height
        let text2TextRect: NSRect = NSRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight)
        NSGraphicsContext.saveGraphicsState()
        text2Rect.clip()
        text2TextContent.draw(in: text2TextRect.offsetBy(dx: 0, dy: 0.5), withAttributes: text2FontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Bezier 4 Drawing
        let bezier4Path = NSBezierPath()
        bezier4Path.move(to: NSPoint(x: 187.5, y: 97.5))
        bezier4Path.line(to: NSPoint(x: 236.5, y: 97.5))
        NSColor.black.setStroke()
        bezier4Path.lineWidth = 3
        bezier4Path.stroke()


        //// Text 3 Drawing
        let text3Rect = NSRect(x: 177, y: 115, width: 20, height: 33)
        let text3TextContent = "V"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .left
        let text3FontAttributes = [
            .font: NSFont(name: "HelveticaNeue-Bold", size: 30)!,
            .foregroundColor: NSColor.black,
            .paragraphStyle: text3Style,
        ] as [NSAttributedStringKey: Any]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: NSSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes).height
        let text3TextRect: NSRect = NSRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight)
        NSGraphicsContext.saveGraphicsState()
        text3Rect.clip()
        text3TextContent.draw(in: text3TextRect.offsetBy(dx: 0, dy: 0.5), withAttributes: text3FontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Polygon 2 Drawing
        NSGraphicsContext.saveGraphicsState()
        context.translateBy(x: 51.25, y: 65.5)
        context.rotate(by: 180 * CGFloat.pi/180)

        let polygon2Path = NSBezierPath()
        polygon2Path.move(to: NSPoint(x: 10.75, y: 22))
        polygon2Path.line(to: NSPoint(x: 20.06, y: 5.5))
        polygon2Path.line(to: NSPoint(x: 1.44, y: 5.5))
        polygon2Path.close()
        NSColor.black.setStroke()
        polygon2Path.lineWidth = 3
        polygon2Path.stroke()

        NSGraphicsContext.restoreGraphicsState()


        //// Bezier 5 Drawing
        let bezier5Path = NSBezierPath()
        bezier5Path.move(to: NSPoint(x: 237.5, y: 131.5))
        bezier5Path.line(to: NSPoint(x: 200.5, y: 131.5))
        NSColor.black.setStroke()
        bezier5Path.lineWidth = 3
        bezier5Path.stroke()


        //// V * x Drawing
        let vXRect = NSRect(x: 356, y: 106, width: 48, height: 21)
        let vXTextContent = "Vâx"
        let vXStyle = NSMutableParagraphStyle()
        vXStyle.alignment = .center
        let vXFontAttributes = [
            .font: NSFont(name: "HelveticaNeue-Bold", size: 24)!,
            .foregroundColor: NSColor.black,
            .paragraphStyle: vXStyle,
        ] as [NSAttributedStringKey: Any]

        let vXTextHeight: CGFloat = vXTextContent.boundingRect(with: NSSize(width: vXRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: vXFontAttributes).height
        let vXTextRect: NSRect = NSRect(x: vXRect.minX, y: vXRect.minY + (vXRect.height - vXTextHeight) / 2, width: vXRect.width, height: vXTextHeight)
        NSGraphicsContext.saveGraphicsState()
        vXRect.clip()
        vXTextContent.draw(in: vXTextRect.offsetBy(dx: 0, dy: 0), withAttributes: vXFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        //// Bezier 6 Drawing
        let bezier6Path = NSBezierPath()
        bezier6Path.move(to: NSPoint(x: 40.5, y: 97.5))
        bezier6Path.line(to: NSPoint(x: 40.5, y: 59.5))
        NSColor.black.setStroke()
        bezier6Path.lineWidth = 3
        bezier6Path.stroke()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawSingleResistor(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 156, height: 45), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 156, height: 45), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 156, y: resizedFrame.height / 45)


        //// Color Declarations
        let resistorColor = NSColor(red: 0.711, green: 0.077, blue: 0.077, alpha: 1)

        //// Variable Declarations
        let color: NSColor = resistorColor

        //// Bezier Drawing
        let bezierPath = NSBezierPath()
        bezierPath.move(to: NSPoint(x: 3, y: 22))
        bezierPath.curve(to: NSPoint(x: 27, y: 22), controlPoint1: NSPoint(x: 27, y: 22), controlPoint2: NSPoint(x: 27, y: 22))
        bezierPath.line(to: NSPoint(x: 38, y: 38))
        bezierPath.line(to: NSPoint(x: 55, y: 6))
        bezierPath.line(to: NSPoint(x: 71, y: 38))
        bezierPath.line(to: NSPoint(x: 87, y: 6))
        bezierPath.line(to: NSPoint(x: 104, y: 38))
        bezierPath.curve(to: NSPoint(x: 120, y: 6), controlPoint1: NSPoint(x: 104, y: 38), controlPoint2: NSPoint(x: 120, y: 4))
        bezierPath.curve(to: NSPoint(x: 128, y: 22), controlPoint1: NSPoint(x: 120, y: 8), controlPoint2: NSPoint(x: 128, y: 22))
        bezierPath.line(to: NSPoint(x: 152, y: 22))
        color.setStroke()
        bezierPath.lineWidth = 3
        bezierPath.lineCapStyle = .roundLineCapStyle
        bezierPath.lineJoinStyle = .roundLineJoinStyle
        bezierPath.stroke()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawResistorCollection(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 86, height: 59), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 86, height: 59), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 86, y: resizedFrame.height / 59)


        //// Symbol Drawing
        NSGraphicsContext.saveGraphicsState()
        context.translateBy(x: 2, y: 37)
        context.scaleBy(x: 0.5, y: 0.5)

        let symbolRect = NSRect(x: 0, y: 0, width: 156, height: 45)
        NSGraphicsContext.saveGraphicsState()
        symbolRect.clip()
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        ResistorImage.drawSingleResistor(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        NSGraphicsContext.restoreGraphicsState()

        NSGraphicsContext.restoreGraphicsState()


        //// Symbol 2 Drawing
        NSGraphicsContext.saveGraphicsState()
        context.translateBy(x: 2, y: 18)
        context.scaleBy(x: 0.5, y: 0.5)

        let symbol2Rect = NSRect(x: 0, y: 0, width: 156, height: 45)
        NSGraphicsContext.saveGraphicsState()
        symbol2Rect.clip()
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        ResistorImage.drawSingleResistor2(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch)
        NSGraphicsContext.restoreGraphicsState()

        NSGraphicsContext.restoreGraphicsState()


        //// Symbol 3 Drawing
        NSGraphicsContext.saveGraphicsState()
        context.translateBy(x: 2, y: -0.5)
        context.scaleBy(x: 0.5, y: 0.5)

        let symbol3Rect = NSRect(x: 0, y: 0, width: 156, height: 45)
        NSGraphicsContext.saveGraphicsState()
        symbol3Rect.clip()
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        ResistorImage.drawSingleResistor3(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch)
        NSGraphicsContext.restoreGraphicsState()

        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawSingleResistor2(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 156, height: 45), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 156, height: 45), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 156, y: resizedFrame.height / 45)


        //// Color Declarations
        let color2 = NSColor(red: 0.242, green: 0.198, blue: 0.844, alpha: 1)

        //// Bezier Drawing
        let bezierPath = NSBezierPath()
        bezierPath.move(to: NSPoint(x: 3, y: 22))
        bezierPath.curve(to: NSPoint(x: 27, y: 22), controlPoint1: NSPoint(x: 27, y: 22), controlPoint2: NSPoint(x: 27, y: 22))
        bezierPath.line(to: NSPoint(x: 38, y: 38))
        bezierPath.line(to: NSPoint(x: 55, y: 6))
        bezierPath.line(to: NSPoint(x: 71, y: 38))
        bezierPath.line(to: NSPoint(x: 87, y: 6))
        bezierPath.line(to: NSPoint(x: 104, y: 38))
        bezierPath.curve(to: NSPoint(x: 120, y: 6), controlPoint1: NSPoint(x: 104, y: 38), controlPoint2: NSPoint(x: 120, y: 4))
        bezierPath.curve(to: NSPoint(x: 128, y: 22), controlPoint1: NSPoint(x: 120, y: 8), controlPoint2: NSPoint(x: 128, y: 22))
        bezierPath.line(to: NSPoint(x: 152, y: 22))
        color2.setStroke()
        bezierPath.lineWidth = 3
        bezierPath.lineCapStyle = .roundLineCapStyle
        bezierPath.lineJoinStyle = .roundLineJoinStyle
        bezierPath.stroke()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawSingleResistor3(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 156, height: 45), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 156, height: 45), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 156, y: resizedFrame.height / 45)


        //// Color Declarations
        let color3 = NSColor(red: 0.376, green: 0.8, blue: 0.32, alpha: 1)

        //// Bezier Drawing
        let bezierPath = NSBezierPath()
        bezierPath.move(to: NSPoint(x: 3, y: 22))
        bezierPath.curve(to: NSPoint(x: 27, y: 22), controlPoint1: NSPoint(x: 27, y: 22), controlPoint2: NSPoint(x: 27, y: 22))
        bezierPath.line(to: NSPoint(x: 38, y: 38))
        bezierPath.line(to: NSPoint(x: 55, y: 6))
        bezierPath.line(to: NSPoint(x: 71, y: 38))
        bezierPath.line(to: NSPoint(x: 87, y: 6))
        bezierPath.line(to: NSPoint(x: 104, y: 38))
        bezierPath.curve(to: NSPoint(x: 120, y: 6), controlPoint1: NSPoint(x: 104, y: 38), controlPoint2: NSPoint(x: 120, y: 4))
        bezierPath.curve(to: NSPoint(x: 128, y: 22), controlPoint1: NSPoint(x: 120, y: 8), controlPoint2: NSPoint(x: 128, y: 22))
        bezierPath.line(to: NSPoint(x: 152, y: 22))
        color3.setStroke()
        bezierPath.lineWidth = 3
        bezierPath.lineCapStyle = .roundLineCapStyle
        bezierPath.lineJoinStyle = .roundLineJoinStyle
        bezierPath.stroke()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    //// Generated Images

    @objc dynamic public class func imageOfResistor(resistorValue: String = "Open") -> NSImage {
        return NSImage(size: NSSize(width: 153, height: 55), flipped: false) { _ in 
            ResistorImage.drawResistor(resistorValue: resistorValue)

            return true
        }
    }

    @objc dynamic public class func imageOfSeriesResistors(value1: String = "11.1K", value2: String = "22.2K", value3: String = "33.3K") -> NSImage {
        return NSImage(size: NSSize(width: 466, height: 80), flipped: false) { _ in 
            ResistorImage.drawSeriesResistors(value1: value1, value2: value2, value3: value3)

            return true
        }
    }

    @objc dynamic public class func imageOfSeriesParallelResistors(value1: String = "11.1K", value2: String = "22.2K", value3: String = "33.3K") -> NSImage {
        return NSImage(size: NSSize(width: 359, height: 137), flipped: false) { _ in 
            ResistorImage.drawSeriesParallelResistors(value1: value1, value2: value2, value3: value3)

            return true
        }
    }

    @objc dynamic public class func imageOfParallelResistors(value1: String = "11.1K", value2: String = "22.2K", value3: String = "33.3K") -> NSImage {
        return NSImage(size: NSSize(width: 260, height: 205), flipped: false) { _ in 
            ResistorImage.drawParallelResistors(value1: value1, value2: value2, value3: value3)

            return true
        }
    }

    @objc dynamic public class func imageOfVoltageDivider(value1: String = "11.1K", value2: String = "22.2K") -> NSImage {
        return NSImage(size: NSSize(width: 372, height: 112), flipped: false) { _ in 
            ResistorImage.drawVoltageDivider(value1: value1, value2: value2)

            return true
        }
    }

    @objc dynamic public class func imageOfOpAmpGain(value1: String = "11.1K", value2: String = "22.2K") -> NSImage {
        return NSImage(size: NSSize(width: 417, height: 163), flipped: false) { _ in 
            ResistorImage.drawOpAmpGain(value1: value1, value2: value2)

            return true
        }
    }

    @objc dynamic public class func imageOfOpAmpGain2(value1: String = "11.1K", value2: String = "22.2K") -> NSImage {
        return NSImage(size: NSSize(width: 417, height: 163), flipped: false) { _ in 
            ResistorImage.drawOpAmpGain2(value1: value1, value2: value2)

            return true
        }
    }




    @objc(ResistorImageResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: NSRect, target: NSRect) -> NSRect {
            if rect == target || target == NSRect.zero {
                return rect
            }

            var scales = NSSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
